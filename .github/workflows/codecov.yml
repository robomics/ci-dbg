# Copyright (C) 2023 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Run Codecov

on:
  push:
    branches: [main]
    paths:
      - ".github/codecov.yml"
      - ".github/workflows/codecov.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/integration/**"
      - "test/units/**"
      - "CMakeLists.txt"
      - "conanfile.py"

  pull_request:
    paths:
      - ".github/codecov.yml"
      - ".github/workflows/codecov.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/integration/**"
      - "test/units/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash


jobs:
  build-project:
    name: Build project
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-gcc-14
      options: "--user=root"
    env:
      CCACHE_DIR: "/opt/ccache-cache"
      CCACHE_COMPILERCHECK: "content"
      CCACHE_NOCOMPRESS: "1"
      CCACHE_MAXSIZE: "50M"
      CONAN_HOME: "/opt/conan/"
    outputs:
      ccache-old-cache-key: ${{ steps.cache-ccache.outputs.cache-matched-key }}

    steps:
      - uses: actions/checkout@v4

      - name: Fix permissions
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Generate cache key
        id: cache-key
        run: |
          hash="${{ hashFiles('conanfile.py', '.github/workflows/codecov.yml') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          ccache_key_prefix="codecov-ccache-$hash"

          echo "conan-key=codecov-$hash" >> $GITHUB_OUTPUT
          echo "ccache-key=${ccache_key_prefix}-${current_date}" >> $GITHUB_OUTPUT
          echo "ccache-restore-key=$ccache_key_prefix" >> $GITHUB_OUTPUT

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache@v4
        with:
          key: conan-${{ steps.cache-key.outputs.conan-key }}
          path: "${{ env.CONAN_HOME }}/p"
          save-always: true

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Copy Conan settings
        run: |
          if [ ! -f "$CONAN_HOME/settings.yml" ]; then
            cp "/root/.conan2/settings.yml" "$CONAN_HOME"
          fi

      - name: Check Conan artifacts before build
        run: |
          mkdir -p "$CONAN_HOME"
          ls -lah "$CONAN_HOME"
          find "$CONAN_HOME" -type d -exec ls -lah {} +

      - name: Install build dependencies
        run: |
          conan install .                        \
             --build=missing                     \
             -pr:b="$CONAN_DEFAULT_PROFILE_PATH" \
             -pr:h="$CONAN_DEFAULT_PROFILE_PATH" \
             -s build_type=Debug                 \
             -s compiler.libcxx=libstdc++11      \
             -s compiler.cppstd=17               \
             --output-folder=build

      - name: Check Conan artifacts before clean
        run: |
          mkdir -p "$CONAN_HOME"
          ls -lah "$CONAN_HOME"
          find "$CONAN_HOME" -type d -exec ls -lah {} +

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Check Conan artifacts after clean
        run: |
          mkdir -p "$CONAN_HOME"
          ls -lah "$CONAN_HOME"
          find "$CONAN_HOME" -type d -exec ls -lah {} +

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug                      \
                -DCMAKE_PREFIX_PATH="$PWD/build"              \
                -DENABLE_DEVELOPER_MODE=ON                    \
                -DOPT_ENABLE_COVERAGE=ON                      \
                -DOPT_ENABLE_SANITIZER_ADDRESS=OFF            \
                -DOPT_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=OFF \
                -DOPT_ENABLE_CLANG_TIDY=OFF                   \
                -S .                                          \
                -B build

      - name: Restore Ccache folder
        id: cache-ccache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-restore-key }}
          path: /tmp/ccache-cache.tar.zst

      - name: Extract Ccache folder
        if: steps.cache-ccache.outputs.cache-matched-key != ''
        run: |
          mkdir -p "$CCACHE_DIR"
          tar -xf /tmp/ccache-cache.tar.zst -C "$CCACHE_DIR"
          rm /tmp/ccache-cache.tar.zst

      - name: Check Ccache artifacts before build
        run: |
          mkdir -p "$CCACHE_DIR"
          ls -lah "$CCACHE_DIR"
          find "$CCACHE_DIR" -type d -exec ls -lah {} +

      - name: Build project
        run: cmake --build build -j $(nproc)

      - name: Check Ccache artifacts after build
        run: |
          mkdir -p "$CCACHE_DIR"
          ls -lah "$CCACHE_DIR"
          find "$CCACHE_DIR" -type d -exec ls -lah {} +

      - name: Package build folder
        run: tar -cf - build/ | zstd -T0 -13 -o build.tar.zst

      - name: Upload build folder
        uses: actions/upload-artifact@v4
        with:
          name: "build-codecov"
          path: build.tar.zst
          if-no-files-found: error
          retention-days: 1

      - name: Print Ccache statistics (pre-cleanup)
        run: ccache -s

      - name: Cleanup Ccache folder
        run: |
          ccache --evict-older-than=14400s # 4h
          ccache --cleanup

      - name: Print Ccache statistics (post-cleanup)
        run: ccache -s

      - name: Archive Ccache folder
        run: |
          tar -cf - -C "$CCACHE_DIR" "$CCACHE_DIR" |
          zstd -T0 -8 --long -v -o /tmp/ccache-cache.tar.zst

      - name: Save Ccache folder
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-key }}
          path: /tmp/ccache-cache.tar.zst
        env:
          ZSTD_CLEVEL: 1

      - name: Print Conan home
        run: |
          conan config home
          echo "CONAN_HOME=$CONAN_HOME"
          
          ls -lah "$CONAN_HOME"
          ls -lah "$CONAN_HOME/p"

  clean-stale-cache:
    needs: [build-project]
    uses: robomics/ci-dbg/.github/workflows/evict-gha-cache.yml@main
    name: Clean stale Ccache cache
    permissions: write-all
    if: needs.build-project.outputs.ccache-old-cache-key != ''
    with:
      cache-key: "${{ needs.build-project.outputs.ccache-old-cache-key }}"

  run-unit-tests:
    name: Run unit tests
    needs: [build-project]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-gcc-14
      options: "--user=root"

    env:
      HICTK_CI: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download unit tests artifact
        uses: actions/download-artifact@v4
        with:
          name: "build-codecov"

      - name: Extract binaries and test dataset
        run: |
          tar -xf build.tar.zst

      - name: Add test user
        run: useradd devel

      - name: Fix permissions
        run: |
          chown -R devel:devel build/

      - name: Setup dependencies
        run: |
          apt-get update
          apt-get install -q -y --no-install-recommends \
            gpg \
            gpg-agent \
            sudo \
            tar

          update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-14 100

      - name: Run unit tests
        run: |
          which ctest
          echo -E env "PATH=$PATH"
          sudo -u devel -E env "PATH=$PATH" which ctest
          sudo -u devel -E env "PATH=$PATH" ctest --help
